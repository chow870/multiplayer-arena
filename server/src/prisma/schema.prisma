generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_GOi3FIMhx4nD@ep-quiet-leaf-a5ukvqbf-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"
}             

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
  MATCHMAKING
  AWAY
}

enum TransactionStatus {
    PENDING
    ACCEPTED
    FAILED
}

enum TransactionType {
  BuyPremium
  Bet
  Topup
  Win
}

enum EmailVerificationType {
  PENDING
  SUCCESS
  FAILED
}
enum FriendshipStatus {
    PENDING
    ACCEPTED
    BLOCKED 
}

enum LobbyStatus {
  WAITING
  ACTIVE
  COMPLETED
  EXPIRED
  ABORTED
}




model User {
  id              String          @id @default(uuid())
  username        String          @unique
  email           String          @unique
  emailVerified   Boolean         @default(false)
  passwordHash    String
  avatarUrl       String?
  bio             String?        @default("")

  // Premium Features
  isPremium       Boolean         @default(false)
  premiumSince    DateTime?

  // Wallet
  wallet          Wallet?

  // Game Stats
  gamesPlayed     Int             @default(0)
  gamesWon        Int             @default(0)
  gamesLost       Int             @default(0)
  rating          Int             @default(0)

  // Game Matching
  status          UserStatus      @default(OFFLINE) 

  // Friends
  sentRequests     Friendship[]   @relation("SentRequests")
  receivedRequests Friendship[]   @relation("ReceivedRequests")

  // Chat
  messages         Message[]      @relation("UserMessages")

  // Betting and Transactions
  transactions     Transaction[]
  bets             Bet[]

  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  createdLobbies   WaitingLobby[] @relation("CreatedLobbies")
  wonGames         GameRecord[]   @relation("WonGames")
  gameRecords      GameRecord[]   @relation("UserGameRecords")
  blogs            Blog[]         @relation("UserBlogs")
  comments         Comment[]      @relation("UserComments")
}

model Message {
  id        String   @id @default(uuid())
  roomId    String
  senderId  String
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  message   String
  timestamp DateTime @default(now())
}


model Wallet {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique

  balance    Float      @default(0.0) // in tokens
  currency   String?   @default("tokens")

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transaction {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  orderId   String?  // optional for Razapay or other payment gateways
  referenceId String? // optional for tracking purposes

  type       TransactionType   // "deposit", "withdraw", "fee", "reward", "bet"
  amount     Int
  status     TransactionStatus   


  createdAt  DateTime @default(now())
}

model Bet {
  id          String   @id @default(uuid())
  userId      String
  gameLobbyId String
  amount      Int
  winnerId    String?
  fee         Int?
  createdAt   DateTime @default(now())
  resolvedAt  DateTime?

  // RELATIONS
  user        User       @relation(fields: [userId], references: [id])
  gameRecord  GameRecord @relation(fields: [gameLobbyId], references: [id])

  @@unique([userId, gameLobbyId]) // âœ… Ensures each user can only bet once per game
}
model Friendship {
  id         String   @id @default(uuid())

  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId   String

  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String

  status     FriendshipStatus  @default(PENDING) // pending, accepted, blocked
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId])
}

model VerifyEmail {
  id         String               @id @default(uuid())
  email      String                @unique
  otpHashed  String               // better to store hashed OTP
  expiry     DateTime
  status     EmailVerificationType @default(PENDING)
  createdAt  DateTime             @default(now())
  resolvedAt DateTime?            @updatedAt

  @@index([email, status]) // quick lookups
}

model WaitingLobby {
  id              String        @id @default(cuid())
  createdById     String
  invitedUserIds  String[]      // List of user IDs invited to this lobby
  status          LobbyStatus   @default(WAITING)
  createdAt       DateTime      @default(now())
  expiresAt       DateTime
  gameLobbyId     String? 
  // joinedUserIds   String[]      @default([])  // Users who have joined
  createdBy       User          @relation("CreatedLobbies", fields: [createdById], references: [id])
  betAmount       Int           @default(0)
  
}

model GameRecord {
  id              String      @id @default(cuid())
  gameType        String      // e.g., "snakes_ladders"
  winnerId        String?     // Optional until game ends
  playerId        String      // The player who owns this record
  invitedUserIds  String[]
  // joinedUserIds   String[]    @default([]) // Added for tracking
  betAmount       Int           @default(0)
  bets            Bet[]
  createdAt       DateTime    @default(now())
  endedAt         DateTime?   // Optional until game ends
  currentState    Json        // Serialized state, type varies by game
  currentTurn     Int?        // User ID of the current player
  gameState       LobbyStatus @default(WAITING)
  winner          User?       @relation("WonGames", fields: [winnerId], references: [id])
  player          User        @relation("UserGameRecords", fields: [playerId], references: [id])
}

model Blog {
  id         String     @id @default(cuid())
  authorId   String
  author     User       @relation("UserBlogs", fields: [authorId], references: [id])
  title      String
  content    Json       // Tiptap JSON
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  likes      Int        @default(0)
  dislikes   Int        @default(0)
  comments   Comment[]  @relation("BlogComments")
}

model Comment {
  id        String   @id @default(cuid())
  blogId    String
  authorId  String
  content   Json     // Tiptap JSON, or simple text
  createdAt DateTime @default(now())
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  blog      Blog     @relation("BlogComments", fields: [blogId], references: [id])
}



